plugins {
  id 'java-library'
  id 'maven-publish'
  id 'com.github.johnrengelman.shadow' version '8.1.1'
  id 'com.diffplug.spotless' version '6.25.0'
  id("io.freefair.lombok") version "9.0.0-rc2"
}

group = 'dev.braintrust'
version = '0.0.1-SNAPSHOT'

java {
  sourceCompatibility = JavaVersion.VERSION_17
  targetCompatibility = JavaVersion.VERSION_17
  withJavadocJar()
  withSourcesJar()
}

repositories {
  mavenCentral()
}

ext {
  otelVersion = '1.54.1'
  jacksonVersion = '2.16.1'
  junitVersion = '5.11.4'
  slf4jVersion = '2.0.17'
}

dependencies {
  api "io.opentelemetry:opentelemetry-api:${otelVersion}"
  api "io.opentelemetry:opentelemetry-sdk:${otelVersion}"
  api "io.opentelemetry:opentelemetry-sdk-trace:${otelVersion}"
  api "io.opentelemetry:opentelemetry-sdk-logs:${otelVersion}"
  implementation "io.opentelemetry:opentelemetry-exporter-otlp:${otelVersion}"
  implementation "io.opentelemetry:opentelemetry-exporter-logging:${otelVersion}"
  implementation "io.opentelemetry:opentelemetry-sdk-testing:${otelVersion}"
  implementation "io.opentelemetry:opentelemetry-semconv:1.30.1-alpha"

  implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
  implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"
  implementation "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:${jacksonVersion}"

  implementation "org.slf4j:slf4j-api:${slf4jVersion}"
  runtimeOnly "org.slf4j:slf4j-simple:${slf4jVersion}"

  implementation 'org.apache.commons:commons-lang3:3.14.0'
  implementation 'com.google.code.findbugs:jsr305:3.0.2' // for @Nullable annotations

  compileOnly 'com.openai:openai-java:2.8.1'
  implementation "io.opentelemetry.instrumentation:opentelemetry-openai-java-1.1:2.19.0-alpha"

  testImplementation "org.junit.jupiter:junit-jupiter:${junitVersion}"
  testImplementation "org.junit.jupiter:junit-jupiter-params:${junitVersion}"
  testImplementation 'com.openai:openai-java:2.8.1'
  testImplementation 'com.github.tomakehurst:wiremock-jre8:2.35.0'
}

test {
  useJUnitPlatform()
  testLogging {
    events "passed", "skipped", "failed"
    exceptionFormat "full"
  }
  environment 'TEST_VAR1', 'fromenv1'
  environment 'TEST_VAR2', 'fromenv2'
}

// Enable preview features for pattern matching, etc.
// Commented out for Java 24 compatibility
// tasks.withType(JavaCompile) {
//     options.compilerArgs += ["--enable-preview"]
// }

// tasks.withType(Test) {
//     jvmArgs += ["--enable-preview"]
// }

// tasks.withType(JavaExec) {
//     jvmArgs += ["--enable-preview"]
// }

jar {
  manifest {
    attributes(
      'Implementation-Title': 'Braintrust Java SDK',
      'Implementation-Version': version,
      'Implementation-Vendor': 'Braintrust'
    )
  }
}

publishing {
  publications {
    maven(MavenPublication) {
      from components.java

      pom {
        name = 'Braintrust Java SDK'
        description = 'OpenTelemetry-based Braintrust SDK for Java'
        url = 'https://github.com/braintrustdata/braintrust-x-java'

        licenses {
          license {
            name = 'MIT License'
            url = 'https://opensource.org/licenses/MIT'
          }
        }

        developers {
          developer {
            id = 'braintrust'
            name = 'Braintrust Team'
            email = 'support@braintrust.dev'
          }
        }
      }
    }
  }
}


// Configure Spotless for code formatting
spotless {
  java {
    target 'src/*/java/**/*.java', 'examples/src/*/java/**/*.java'

    // Use Google Java Format
    googleJavaFormat('1.19.2').aosp().reflowLongStrings()

    // Remove unused imports
    removeUnusedImports()

    // Trim trailing whitespace
    trimTrailingWhitespace()

    // End with newline
    endWithNewline()
  }
}

// Task to install git hooks
task installGitHooks(type: Exec) {
  description = 'Install git hooks for code formatting'
  group = 'Build Setup'
  commandLine 'bash', 'scripts/install-hooks.sh'
}

// Run installGitHooks after project evaluation
afterEvaluate {
  // Install hooks when building for the first time
  tasks.named('build').configure {
    dependsOn installGitHooks
  }
}
